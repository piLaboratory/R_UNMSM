- Class: meta
  Course: Análisis y visualización de datos biológicos con R
  Lesson: Mi primera sessión en R y RStudio
  Author: Paulo Inácio Prado a partir de una leción de Claudia Brauer (Wageningen University)
  Type: Standard
  Organization: Universidade de São Paulo
  Version: 1.0.0

- Class: text  
  Output: "Esta es nuestra primera lección, en la que tendrás un primer contacto con R usando RStudio. Esta lección fue adaptada y traducida al español del módulo 1 del curso 'A (very) short introduction to R, de Claudia Brauer (www.github.com/ClaudiaBrauer/A-very-short-introduction-to-R)."
  
- Class: text  
  Output: La interfaz de RStudio tiene varias ventanas. Puede cambiar el tamaño de las ventanas arrastrando las barras grises entre las ventanas. 
  
- Class: text  
  Output: Abajo a la izquierda está la ventana de la consola (también llamada ventana/línea de comandos). Aquí puede escribir comandos después del prompt > y R ejecutará su comando. Esta es la ventana más importante, porque aquí es donde R realmente hace cosas. 

- Class: text  
  Output: "Arriba a la izquierda está la ventana del editor de códigos (también llamada ventana de script). Aquí se pueden editar y guardar colecciones de comandos (scripts). Si no aparece esta ventana, puede abrirla con 'File > New R > Script' ('Archivo' > 'Nuevo' > 'R script')."

- Class: text  
  Output: "Escribir comandos en la ventana del editor no es suficiente, tiene que llegar a la ventana de comandos antes de que R ejecute el comando. Si quieres ejecutar una línea desde la ventana del script (o todo el script), puedes hacer click en 'Run' o pulsar 'CTRL+ENTER' para enviarlo a la ventana de comandos."

- Class: text
  Output: La ventana de scripts es muy importante, ya que en ella podrás crear y guardar tus códigos en R para usarlos cuando los necesites. Por ejemplo, para resolver los ejercicios de nuestro curso, deberás escribir los códigos y guadalos, para luego enviarlos a través de un sistema en línea llamado notaR.

- Class: text
  Output: "¡Intenta resolver el resto de este tutorial con un script! Para ello, abre un archivo script ('Archivo > Nuevo R > Script'), escribe los siguientes comandos en él, y envía los comandos a la consola de R pulsando 'CTRL+ENTER'."

- Class: text  
  Output: Arriba a la derecha está la ventana de espacio de trabajo y de historial. En la ventana de espacio de trabajo puede ver qué datos y valores tiene R en su memoria. La ventana de historial muestra lo que se ha escrito anteriormente. Hay otras ventanas de que hablaremos después.

- Class: text  
  Output: Abajo a la derecha está la ventana de archivos / gráficos / paquetes / ayuda / visor. Aquí puede abrir archivos, ver gráficos (también gráficos anteriores), instalar y cargar paquetes o utilizar la función de ayuda. 

- Class: text  
  Output: Su directorio de trabajo es la carpeta de su computadora en la que está trabajando actualmente. Cuando le pida a R que abra un determinado archivo, buscará este archivo en el directorio de trabajo, y cuando le diga a R que guarde un archivo de datos o una figura, lo guardará en el directorio de trabajo.

- Class: text  
  Output: Para mantener tu trabajo organizado, es muy importante que crees un directorio de trabajo para cada análisis que vayas a realizar. Así que crea ahora mismo un directorio para este curso, donde guardarás todas tus scripts y otros archivos. 

- Class: text  
  Output: Ahora debe establecer su directorio de trabajo en este directorio que ha creado. Dentro de RStudio puede ir a 'Session' > 'Set working directory' > 'Choose directory'. Por favor, hágalo ahora. Cada vez que empiece a trabajar compruebe que se encuentra en el directorio de trabajo correcto.
  
- Class: text  
  Output: En lugar de hacer clic, también puede escribir en la ventana de comandos setwd('su directorio'), donde 'su directorio' es la ruta para su directorio (por ejemplo setwd('C:/Documents/CursoR/'). Asegúrese de que las barras inclinadas son barras inclinadas hacia delante y de que no olvida los apóstrofos. R distingue entre mayúsculas y minúsculas, así que asegúrese de escribir mayúsculas donde sea necesario. No hace falta que lo intentes ahora.
  
- Class: text  
  Output: R puede realizar muchos análisis estadísticos y de datos. Están organizados en los llamados paquetes o bibliotecas. Con la instalación estándar, se instalan los paquetes más comunes.  

- Class: text  
  Output: Para obtener una lista de todos los paquetes instalados, vaya a la ventana de paquetes. Si la casilla situada delante del nombre del paquete está marcada, el paquete está cargado (activado) y puede utilizarse. Busque el paquete swirl en la ventana de paquetes y compruebe si la casilla está marcada.
  
- Class: text  
  Output: Hay muchos más paquetes disponibles en el sitio web de R. Si desea instalar y utilizar un paquete (por ejemplo, el paquete llamado 'geometry') primero debe instalar el paquete haciendo clic en 'install packages' en la ventana de paquetes y escribiendo geometry o escribiendo install.packages('geometry') en la ventana de comandos. En realidad ya has hecho esto para el paquete swirl. 

- Class: text  
  Output: A continuación, debes cargar el paquete marcando la casilla delante de geometry o escribiendo library(geometry) en la ventana de comandos. También has hecho esto para el paquete swirl (de lo contrario no podrías hacer estos ejercicios). 

- Class: text
  Output: Ahora, empecemos con la programación de verdad. 
  
- Class: cmd_question
  Output: R puede utilizarse como calculadora. Puedes escribir tu ecuación en la ventana de comandos después del >. Escribe 10^2 + 36. Puede tambíen escribrir el comando en el primeiro reglón del archivo script y entonces enviarlo a R con CTRL-ENTER. 
  CorrectAnswer: 10^2 + 36
  AnswerTests: omnitest(correctExpr='10^2 + 36') 
  Hint: 10^2 + 36.

- Class: text
  Output: Y R dio la respuesta directamente. Además, los espacios no importan.

- Class: cmd_question  
  Output: También puede dar un nombre a los números. Al hacerlo, se convierten en los denominados objetos, que pueden utilizarse posteriormente. Por ejemplo, para crear el objeto 'A' con el valor 4, escriba el comando A <- 4 .
  CorrectAnswer: A <-  4
  AnswerTests: omnitest(correctExpr='A<-4') 
  
- Class: text  
  Output: Puede ver que A apareció en la ventana del espacio de trabajo en la esquina superior derecha, lo que significa que R ahora recuerda qué es A.
  
- Class: text
  Output: Algunas personas prefieren utilizar = en lugar de <-. Hacen lo mismo, es decir, asignar valores a nombres (objetos). 

- Class: text
  Output: "<- consta de dos caracteres, < y -, y representa una flecha que apunta al objeto que recibe el valor de la expresión. En Rstudio tienes un atajo para ello: basta con pulsar Alt- (es decir, las teclas Alt y la tecla del signo menos). Pruébalo en los próximos comandos."  

- Class: cmd_question
  Output: También puedes preguntarle a R que hay en un objeto. Sólo tienes que escribir el nombre del objeto en la ventana de comandos. Escriba A
  CorrectAnswer: A
  AnswerTests: omnitest(correctExpr='A') 

- Class: cmd_question
  Output: También puedes hacer cálculos con los objetos. Escribe A * 5 .
  CorrectAnswer: A*5 
  AnswerTests: omnitest(correctExpr='A*5')

- Class: cmd_question
  Output: Si vuelve a especificar A, R olvidará el valor que tenía antes. También puede asignar un nuevo valor a A utilizando el anterior. Escriba A <- A + 10 .
  CorrectAnswer: A <- A + 10  
  AnswerTests: omnitest(correctExpr= 'A <-  A + 10') 

- Class: text  
  Output: Ahora puedes ver en la ventana del espacio de trabajo que se cambió el contenido de A.
 
- Class: cmd_question
  Output: Para eliminar todas las variables de la memoria de R, escriba rm(list=ls()) .
  CorrectAnswer: rm(list=ls()) 
  AnswerTests: omnitest(correctExpr='rm(list=ls())')


- Class: text
  Output: Verá que la ventana del espacio de trabajo está vacía. También puede hacer clic en el icono de la escoba (`clear all`) en la ventana del área de trabajo. Puede ver que RStudio vacía la ventana del área de trabajo. Si sólo desea eliminar la variable A, puede escribir rm(A).

- Class: text
  Output: Mientras escribes el último comando puedes notar que Rstudio adivina algo de lo que has escrito, como cerrar un paréntesis que has abierto. Este autocompletado es una buena característica para reducir el riesgo de errores de sintaxis. Pronto hablaremos más sobre esto.

- Class: text
  Output: Como en muchos otros programas, R organiza los números en escalares (un único número, 0-dimensional), vectores (una fila de números, también llamados arrays, 1-dimensional) y matrices (como una tabla, 2-dimensional).

- Class: cmd_question
  Output: El objeto A que definiste antes era un escalar. Para definir un vector con los números 3, 4 y 5, necesitas la función c, que es la abreviatura de concatenar (pegar juntos). Escribe B <- c(3,4,5) .
  CorrectAnswer: B<-c(3,4,5) 
  AnswerTests: omnitest(correctExpr='B<-c(3,4,5)')

- Class: text
  Output: Conoceremos matrices y otros objetos de más dimensiones en los próximos días.

- Class: cmd_question
  Output: Si quisieras calcular la media de todos los elementos del vector B del ejemplo anterior, podrías escribir (3+4+5)/3. Pruebe lo siguiente.
  CorrectAnswer: (3+4+5)/3
  AnswerTests: omnitest(correctExpr='(3+4+5)/3')
  
- Class: text  
  Output: Pero cuando el vector es muy largo, este trabajo es muy aburrido y puede llevar a errores. Por eso las cosas que se hacen a menudo se automatizan en las llamadas funciones. Algunas funciones son estándar en R o en uno de los paquetes. También puedes programar tus propias funciones (lo harás más adelante). 
  
- Class: cmd_question
  Output: Para calcular la media aritmética utilizamos la función mean. Escribe mean(x=B) para comprobarlo.
  CorrectAnswer: mean(x=B)
  AnswerTests: omnitest(correctExpr='mean(x=B)')

- Class: cmd_question
  Output: Entre los paréntesis de las funciones se especifican los argumentos. Los argumentos proporcionan información necesaria o adicional a la función. En este caso, el argumento x dice de qué conjunto de números (vector) debe calcularse la media (es decir, de B). A veces, el nombre del argumento no es necesario; mean(B) también funciona. Pruébelo.
  CorrectAnswer: mean(B)
  AnswerTests: omnitest(correctExpr='mean(B)')
  Hint: type mean(B)

- Class: text
  Output: Cuando escribe 'mean' en la línea de comandos, RStudio muestra una lista de funciones que empiezan por 'mean'. Puede seleccionar una de las opciones y pulsar Intro para insertar la llamada a la función junto con sus paréntesis de apertura y cierre. A continuación, puede rellenar los argumentos dentro de los paréntesis. Esta es una de las útiles funciones de autocompletado de RStudio.

- Class: cmd_question   
  Output: Calcula la suma de 4, 5, 8 y 11 combinándolos primero en un vector y utilizando después la función sum. Utiliza la función c dentro de la función sum.
  CorrectAnswer: sum(c(4,5,8,11)) 
  AnswerTests: omnitest(correctExpr='sum(c(4,5,8,11))') 
  Hint: Type sum(c(4,5,8,11)) 

- Class: cmd_question
  Output: La función rnorm, como otro ejemplo, es una función estándar de R que crea muestras aleatorias a partir de una distribución normal. Escriba rnorm(100) y verá 100 números aleatorios extraídos de una normal.
  CorrectAnswer: rnorm(100)
  AnswerTests: omnitest(correctExpr='rnorm(100)')

- Class: text
  Output: Aquí rnorm es la función y el 100 es un argumento que especifica cuántos números aleatorios desea - en este caso 100 números (escribir n=100 en lugar de sólo 100 también funcionaría). El resultado son 10 números aleatorios organizados en un vector de longitud 100.

- Class: cmd_question
  Output: Si vuelve a introducir el mismo comando, obtendrá 100 nuevos números aleatorios. En lugar de volver a escribir el mismo texto en la línea de comando, también puedes pulsar la tecla de flecha hacia arriba  (flecha arriba) para acceder a comandos anteriores. Si está en el archivo de script, vuelva a el comando y pulsa CTRL-ENTER. Pruebe a hacerlo.
  CorrectAnswer: rnorm(100)
  AnswerTests: omnitest(correctExpr='rnorm(100)')

- Class: cmd_question
  Output: Si quieres 100 números aleatorios de una distribución normal con media 1.2 y desviación estándar 3.4 puedes escribir rnorm(100, mean=1.2, sd=3.4). Inténtelo.
  CorrectAnswer: rnorm(100, mean=1.2, sd=3.4)
  AnswerTests: omnitest(correctExpr='rnorm(100, mean=1.2, sd=3.4)')

- Class: text
  Output: Esto demuestra que la misma función (rnorm) puede tener diferentes interfaces y que R tiene los llamados argumentos con nombre (en este caso mean y sd).

- Class: cmd_question
  Output: La comparación de este ejemplo con el anterior también muestra que para la función rnorm sólo el primer argumento (el número 100) es obligatorio, y que R da valores por defecto a los otros argumentos denominados opcionales. Utilice la función de ayuda para ver qué valores se utilizan por defecto escribiendo ?rnorm. 
  CorrectAnswer: ?rnorm  
  AnswerTests: omnitest(correctExpr='?rnorm')

- Class: text
  Output: "Las páginas de ayuda de R pueden tratar de múltiples funciones relacionadas. Este es el caso de la página de ayuda de 'rnorm', que también incluye información sobre otras tres funciones: 'dnorm', 'pnorm', y 'qnorm'. Por ahora, vamos a centrarnos en los detalles sobre `rnorm` y dejar de lado las otras."

- Class: mult_question
  Output: Las páginas de ayuda de las funciones en R tienen un formato estándar. Siempre comienzan con un título, y las secciones Description ('Descripción') y Usage ('uso'). La sección 'Usage' muestra el comando para llamar a la función con todos sus argumentos. Si los argumentos tienen valores por defecto se indicará con el nombre del argumento, un signo igual y el valor por defecto. ¿Cuáles son los argumentos de la función rnorm?
  AnswerChoices: x, mean, sd;n, mean, sd;mean, sd
  CorrectAnswer: n, mean, sd
  AnswerTests: omnitest(correctVal='n, mean, sd')
  Hint: Mire a todos los argumentos entre cochertes de rnorn en la sección Usage.

- Class: mult_question
  Output: ¿Cuáles son los argumentos de la función rnorm tienen valores por defecto?
  AnswerChoices: todos los argumentos;n, mean, sd;mean, sd
  CorrectAnswer: mean, sd
  AnswerTests: omnitest(correctVal='mean, sd')
  Hint: Mire los argumentos entre los paréntesis de rnorm en la sección 'Usage' que tienen un signo igual y un valor numérico.

- Class: text
  Output: Hay otra forma rápida de conocer los nombres de los argumentos de las funciones en RStudio. Al escribir rnorm( en la ventana de comandos y pulsar TAB, RStudio mostrará los posibles argumentos.

- Class: cmd_question
  Output: Puede guardar el resultado de una funcción en un objeto. Escribe  x<-rnorm(100).
  CorrectAnswer: x<-rnorm(100)  
  AnswerTests: omnitest(correctExpr='x<-rnorm(100)')

- Class: text  
  Output: Ahora se asignan 100 números aleatorios al objeto x, que se convierte en un vector mediante esta operación. Puedes verlo aparecer en la ventana del espacio de trabajo. 

- Class: cmd_question
  Output: R también hace gráficos. Escribe hist(x) para un ejemplo muy sencillo.
  CorrectAnswer: hist(x)
  AnswerTests: omnitest(correctExpr='hist(x)')

- Class: text
  Output: Mira la ventana de gráficos de la derecha. Hiciste un histograma de los 100 números aleatorios en el vector x. Como era de esperar de una muestra de un distribuición normal, el histograma tiene forma aproximada de campana.

- Class: text
  Output: Enhorabuena. Has terminado el primer tutorial del curso y te has familiarizado un poco más con R y RStudio. Guarda tu archivo de script y escribe tus preguntas para discutirlas en clase.
