name: '109.02 Indices de diversidad de especies'
description: |-
    <p>Haz una función llamada <code>shannon</code> para calcular el indice de diversidad de Shannon y una otra función nombrada  <code>simpson</code> para calculoar el indice de Simpson de un vector de valores numéricos positivos. </p>
    <p><b>Considere que:</b></p>
    <ol><li>El objeto de entrada deve ser un vector con la abundancia de cada espécie en una amostra.
    </li><p><li>Su función debe manejar la posibilidade de valores faltantes (<code>NA</code>), sacandoles para entonces hacer los calculos.
    </li></ol><p>
    El indice de Shannon es:
    <p>
    <img align="middle" src="http://latex.codecogs.com/svg.latex? H = - \sum{p_i\ln{(p_i)}}"/> 
    <p>
    El indice de Simpson es:
    <p>
    <img src="https://latex.codecogs.com/svg.latex?D = \sum{p_i^2}">
    <p>
    donde <img align="middle" src="http://latex.codecogs.com/svg.latex? p_i"/> es la proporcion de cada espécie <i>i</i> del número total de indivíduos en la amostra  (<img align="middle" src="http://latex.codecogs.com/svg.latex?\frac{n_i}{N} ">) .
    </li><p>
    <b>Acuerdate que </b>: el logaritmo de zero retorna <code>NaN</code>. Eso importa para el calculo del indice de Shannon. 
    <b>Ojo:</b> use el logaritmo natural en sus calculos.
precondicoes: |-
    ipt0 <- c(1:3, 0, 5, 0, 3:8, 4, 0, 5, 4)
    ipt1<-c(1:3,NA,5,NA,3:8,4,NA,5,4)
    ipt2<-matrix(c(1:3,NA,5,NA,3:8,4,NA,5,4),ncol=4,nrow=4)

    Homer<-function(data) sum((na.omit(data)/sum(na.omit(data)))^2)
    Lenon<-function(data){x<-data[!is.na(data)&!is.nan(data)&data>0]; -sum(x/sum(x)*log(x/sum(x)), base = exp(1))}

    vida<-function(data,indice)
    {
      if(indice=="simpson") 
      {
        resultado<-apply(data,2,FUN=Homer)
        return(resultado)
      }
      else
      {
        resultado<-apply(data,2,FUN=Lenon)
        return(resultado)
      }
    }
topico_id: 9
testes:
    - { condicao: 'exists("shannon")', dica: 'No hay objeto nombrado shannon', peso: 1.0 }
    - { condicao: 'exists("simpson")', dica: 'No hay objeto nombrado simpson', peso: 1.0 }
    - { condicao: 'class(shannon)=="function" & length(formals(shannon)) == 1', dica: 'El objeto shannon debe ser de la clase function y tener un único argumento', peso: 1.0 }
    - { condicao: 'class(simpson)=="function" & length(formals(simpson)) == 1', dica: 'El objeto shannon debe ser de la clase function y tener un único argumento', peso: 1.0 }
    - { condicao: '!is.na(shannon(ipt1))', dica: 'La función <code>shannon</code> retorna valores <code>NA</code>.', peso: 3.0 }
    - { condicao: '!is.nan(shannon(ipt0))', dica: 'La función <code>shannon</code> retorna valores <code>NaN</code>.', peso: 3.0 }
    - { condicao: '!is.na(simpson(ipt1))', dica: 'La función <code>simpson</code> retorna valores <code>NA</code>.', peso: 3.0 }
    - { condicao: 'all.equal(Lenon(ipt1),shannon(ipt1))', dica: 'La función <code>shannon</code> no retorna los valores esperados.', peso: 5.0 }
    - { condicao: 'all.equal(Homer(ipt1),simpson(ipt1))', dica: 'La función <code>simpson</code> no retorna los valores esperados.', peso: 5.0 }
